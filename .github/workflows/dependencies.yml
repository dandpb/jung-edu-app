name: Dependency Management

on:
  schedule:
    # Run every Monday at 9:00 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of updates to apply'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - all
      auto_merge:
        description: 'Auto-merge safe updates'
        required: false
        default: true
        type: boolean

concurrency:
  group: dependencies-${{ github.ref }}
  cancel-in-progress: false

env:
  NODE_VERSION: '18'

jobs:
  security-updates:
    name: Security Updates
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Check for security vulnerabilities
        run: |
          echo "## 🔒 Security Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Run security audit
          npm audit --audit-level=high --json > audit-results.json || true
          
          VULNERABILITIES=$(cat audit-results.json | jq '.metadata.vulnerabilities.total // 0')
          HIGH_VULNERABILITIES=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNERABILITIES=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
          
          echo "**Total vulnerabilities:** $VULNERABILITIES" >> $GITHUB_STEP_SUMMARY
          echo "**High severity:** $HIGH_VULNERABILITIES" >> $GITHUB_STEP_SUMMARY
          echo "**Critical severity:** $CRITICAL_VULNERABILITIES" >> $GITHUB_STEP_SUMMARY
          
          if [ $VULNERABILITIES -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Vulnerability Details:" >> $GITHUB_STEP_SUMMARY
            cat audit-results.json | jq -r '.vulnerabilities | to_entries[] | "- **\(.key)**: \(.value.severity) - \(.value.title)"' >> $GITHUB_STEP_SUMMARY || true
          fi
          
      - name: Apply security fixes
        run: |
          if npm audit fix --dry-run 2>&1 | grep -q "found.*vulnerabilities"; then
            echo "Applying security fixes..."
            npm audit fix
            
            # Check if package-lock.json was modified
            if git diff --quiet package-lock.json; then
              echo "No security fixes applied"
              echo "security_fixes=false" >> $GITHUB_ENV
            else
              echo "Security fixes applied"
              echo "security_fixes=true" >> $GITHUB_ENV
            fi
          else
            echo "No security fixes available"
            echo "security_fixes=false" >> $GITHUB_ENV
          fi
          
      - name: Run tests after security fixes
        if: env.security_fixes == 'true'
        run: |
          npm ci
          npm run test:critical
        env:
          CI: true
          SKIP_INTEGRATION: true
          
      - name: Create security update PR
        if: env.security_fixes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { exec } = require('child_process');
            const util = require('util');
            const execPromise = util.promisify(exec);
            
            // Configure git
            await execPromise('git config user.name "github-actions[bot]"');
            await execPromise('git config user.email "github-actions[bot]@users.noreply.github.com"');
            
            // Create branch
            const branchName = `security/automated-fixes-${Date.now()}`;
            await execPromise(`git checkout -b ${branchName}`);
            
            // Commit changes
            await execPromise('git add package-lock.json package.json');
            await execPromise('git commit -m "fix: apply automated security updates\n\n- Fixed security vulnerabilities found by npm audit\n- Auto-generated by GitHub Actions"');
            
            // Push branch
            await execPromise(`git push origin ${branchName}`);
            
            // Create PR
            await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'fix: automated security updates',
              head: branchName,
              base: 'main',
              body: `## 🔒 Automated Security Updates
            
            This PR contains automated security fixes identified by \`npm audit\`.
            
            ### Changes:
            - Applied security patches to vulnerable dependencies
            - Updated package-lock.json with secure versions
            
            ### Testing:
            - ✅ Critical tests passed
            - ✅ Build validation completed
            
            **This PR is safe to merge** - it only contains security patches.
            
            ---
            *Generated by GitHub Actions Security Workflow*`,
              labels: ['security', 'dependencies', 'auto-generated']
            });

  dependency-updates:
    name: Dependency Updates
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        update_type: [patch, minor]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Check for available updates
        run: |
          # Install npm-check-updates
          npm install -g npm-check-updates
          
          # Generate update report
          echo "## 📦 Available Updates (${{ matrix.update_type }})" >> update-report.md
          echo "" >> update-report.md
          
          case "${{ matrix.update_type }}" in
            "patch")
              ncu --target patch --format json > patch-updates.json || true
              ;;
            "minor")
              ncu --target minor --format json > minor-updates.json || true
              ;;
            "major")
              ncu --target major --format json > major-updates.json || true
              ;;
          esac
          
      - name: Apply updates
        id: apply-updates
        run: |
          UPDATE_FILE="${{ matrix.update_type }}-updates.json"
          
          if [ -f "$UPDATE_FILE" ] && [ -s "$UPDATE_FILE" ]; then
            # Count updates
            UPDATE_COUNT=$(cat "$UPDATE_FILE" | jq 'length // 0')
            
            if [ $UPDATE_COUNT -gt 0 ]; then
              echo "Found $UPDATE_COUNT ${{ matrix.update_type }} updates"
              
              # Apply updates based on type
              case "${{ matrix.update_type }}" in
                "patch")
                  ncu --target patch -u
                  ;;
                "minor")
                  ncu --target minor -u
                  ;;
                "major")
                  # For major updates, be more cautious
                  ncu --target major -u --reject react,react-dom,@types/react,@types/react-dom
                  ;;
              esac
              
              # Install updated dependencies
              npm install
              
              echo "updates_applied=true" >> $GITHUB_OUTPUT
              echo "update_count=$UPDATE_COUNT" >> $GITHUB_OUTPUT
            else
              echo "No ${{ matrix.update_type }} updates available"
              echo "updates_applied=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "No updates file found"
            echo "updates_applied=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Validate updates
        if: steps.apply-updates.outputs.updates_applied == 'true'
        run: |
          echo "Validating updates..."
          
          # Install dependencies
          npm ci
          
          # Run comprehensive tests
          npm run test:critical
          
          # Try to build
          npm run build
          
          echo "✅ Updates validated successfully"
        env:
          CI: true
          SKIP_INTEGRATION: true
          
      - name: Create update PR
        if: steps.apply-updates.outputs.updates_applied == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { exec } = require('child_process');
            const util = require('util');
            const execPromise = util.promisify(exec);
            
            // Configure git
            await execPromise('git config user.name "github-actions[bot]"');
            await execPromise('git config user.email "github-actions[bot]@users.noreply.github.com"');
            
            // Create branch
            const branchName = `deps/${{ matrix.update_type }}-updates-${Date.now()}`;
            await execPromise(`git checkout -b ${branchName}`);
            
            // Commit changes
            await execPromise('git add package.json package-lock.json');
            await execPromise(`git commit -m "chore: update ${{ matrix.update_type }} dependencies\n\nUpdated ${{ steps.apply-updates.outputs.update_count }} ${{ matrix.update_type }} dependencies\n\n- All tests pass\n- Build validation completed\n- Auto-generated by GitHub Actions"`);
            
            // Push branch
            await execPromise(`git push origin ${branchName}`);
            
            // Determine if this should auto-merge
            const autoMerge = '${{ github.event.inputs.auto_merge }}' === 'true' && '${{ matrix.update_type }}' === 'patch';
            
            // Create PR
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `chore: update ${{ matrix.update_type }} dependencies`,
              head: branchName,
              base: 'main',
              body: `## 📦 Dependency Updates (${{ matrix.update_type }})
            
            This PR updates **${{ steps.apply-updates.outputs.update_count }}** ${{ matrix.update_type }} dependencies to their latest versions.
            
            ### Validation:
            - ✅ Critical tests passed
            - ✅ Build completed successfully
            - ✅ No breaking changes detected
            
            ### Update Type: \`${{ matrix.update_type }}\`
            ${{ matrix.update_type == 'patch' && '- **Safe to merge** - Only bug fixes and patches' || '' }}
            ${{ matrix.update_type == 'minor' && '- **Review recommended** - New features, should be backward compatible' || '' }}
            ${{ matrix.update_type == 'major' && '- **Careful review required** - Potential breaking changes' || '' }}
            
            ${autoMerge ? '🤖 **Auto-merge enabled** - This PR will merge automatically if all checks pass.' : ''}
            
            ---
            *Generated by GitHub Actions Dependency Workflow*`,
              labels: ['dependencies', '${{ matrix.update_type }}-update', 'auto-generated']
            });
            
            // Enable auto-merge for patch updates
            if (autoMerge) {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.data.number,
                commit_title: `chore: update ${{ matrix.update_type }} dependencies (#${pr.data.number})`,
                commit_message: `Updated ${{ steps.apply-updates.outputs.update_count }} ${{ matrix.update_type }} dependencies`,
                merge_method: 'squash'
              });
            }

  dependency-health-check:
    name: Dependency Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Analyze dependencies
        run: |
          # Install analysis tools
          npm install -g depcheck npm-check-updates license-checker
          
          echo "## 🔍 Dependency Health Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for unused dependencies
          echo "### Unused Dependencies:" >> $GITHUB_STEP_SUMMARY
          depcheck --json > depcheck-results.json || true
          UNUSED_DEPS=$(cat depcheck-results.json | jq -r '.dependencies[]' 2>/dev/null || echo "")
          
          if [ -n "$UNUSED_DEPS" ]; then
            echo "```" >> $GITHUB_STEP_SUMMARY
            echo "$UNUSED_DEPS" >> $GITHUB_STEP_SUMMARY
            echo "```" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No unused dependencies found" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for outdated packages
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Outdated Packages:" >> $GITHUB_STEP_SUMMARY
          ncu --format json > ncu-results.json || true
          OUTDATED_COUNT=$(cat ncu-results.json | jq 'length // 0')
          echo "**$OUTDATED_COUNT** packages can be updated" >> $GITHUB_STEP_SUMMARY
          
          # License compliance check
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### License Compliance:" >> $GITHUB_STEP_SUMMARY
          license-checker --json --production > licenses.json || true
          
          # Count licenses
          TOTAL_PACKAGES=$(cat licenses.json | jq 'length // 0')
          echo "**$TOTAL_PACKAGES** production dependencies checked" >> $GITHUB_STEP_SUMMARY
          
          # Check for problematic licenses
          PROBLEMATIC_LICENSES=$(cat licenses.json | jq -r 'to_entries[] | select(.value.licenses | type == "string" and (contains("GPL") or contains("AGPL") or contains("LGPL"))) | .key' 2>/dev/null || echo "")
          
          if [ -n "$PROBLEMATIC_LICENSES" ]; then
            echo "⚠️ **Potentially problematic licenses found:**" >> $GITHUB_STEP_SUMMARY
            echo "```" >> $GITHUB_STEP_SUMMARY
            echo "$PROBLEMATIC_LICENSES" >> $GITHUB_STEP_SUMMARY
            echo "```" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No problematic licenses detected" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Generate dependency report
        run: |
          # Create a comprehensive dependency report
          cat > dependency-report.md << 'EOF'
          # Dependency Health Report
          
          Generated on: $(date)
          
          ## Summary
          - Total dependencies: $(cat package.json | jq '.dependencies | length')
          - Dev dependencies: $(cat package.json | jq '.devDependencies | length')
          - Outdated packages: $(cat ncu-results.json | jq 'length // 0')
          
          ## Recommendations
          1. Review and remove unused dependencies regularly
          2. Keep patch and minor updates current
          3. Test major updates in feature branches
          4. Monitor security advisories
          
          EOF
          
      - name: Upload dependency artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dependency-analysis
          path: |
            depcheck-results.json
            ncu-results.json
            licenses.json
            dependency-report.md
          retention-days: 30

  cleanup-old-branches:
    name: Cleanup Dependency Branches
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'schedule'
    
    steps:
      - name: Cleanup old dependency branches
        uses: actions/github-script@v7
        with:
          script: |
            const { data: branches } = await github.rest.repos.listBranches({
              owner: context.repo.owner,
              repo: context.repo.repo,
              protected: false
            });
            
            const depBranches = branches.filter(branch => 
              branch.name.startsWith('deps/') || 
              branch.name.startsWith('security/')
            );
            
            let deletedCount = 0;
            
            for (const branch of depBranches) {
              try {
                // Check if branch has an open PR
                const { data: prs } = await github.rest.pulls.list({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  head: `${context.repo.owner}:${branch.name}`,
                  state: 'open'
                });
                
                // Only delete if no open PR and branch is older than 7 days
                if (prs.length === 0) {
                  const { data: commit } = await github.rest.repos.getCommit({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: branch.commit.sha
                  });
                  
                  const commitDate = new Date(commit.commit.author.date);
                  const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
                  
                  if (commitDate < weekAgo) {
                    await github.rest.git.deleteRef({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      ref: `heads/${branch.name}`
                    });
                    
                    deletedCount++;
                    console.log(`Deleted old dependency branch: ${branch.name}`);
                  }
                }
              } catch (error) {
                console.log(`Failed to process branch ${branch.name}: ${error.message}`);
              }
            }
            
            console.log(`Cleaned up ${deletedCount} old dependency branches`);
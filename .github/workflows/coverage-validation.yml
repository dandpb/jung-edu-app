name: Coverage Validation

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test-and-validate:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests
      run: npm run test:unit
      
    - name: Run component tests
      run: npm run test:components
      
    - name: Run utility tests
      run: npm run test:utils
      
    - name: Run integration tests
      run: npm run test:integration
      
    - name: Run critical file tests
      run: npm run test:critical
      
    - name: Generate coverage report
      run: npm run test:coverage
      
    - name: Validate coverage thresholds
      run: npm run test:validate-coverage
      
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-${{ matrix.node-version }}
        path: |
          coverage/
          coverage-reports/
        retention-days: 7
        
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const reportPath = path.join(process.cwd(), 'coverage-reports', 'coverage-report.md');
            if (fs.existsSync(reportPath)) {
              const report = fs.readFileSync(reportPath, 'utf8');
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: report
              });
            }
          } catch (error) {
            console.log('Could not post coverage report:', error);
          }
    
    - name: Fail if coverage thresholds not met
      run: |
        if [ -f "coverage-reports/validation-report.json" ]; then
          PASSED=$(node -p "require('./coverage-reports/validation-report.json').passed")
          if [ "$PASSED" != "true" ]; then
            echo "Coverage validation failed"
            exit 1
          fi
        fi

  quality-gates:
    runs-on: ubuntu-latest
    needs: test-and-validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint || echo "Linting not configured"
      
    - name: Check build
      run: npm run build
      
    - name: Security audit
      run: npm audit --audit-level=moderate
      
    - name: Bundle size check
      run: |
        npm run build
        BUILD_SIZE=$(du -sh build/ | cut -f1)
        echo "Build size: $BUILD_SIZE"
        # Add size threshold check if needed
        
  deployment-readiness:
    runs-on: ubuntu-latest
    needs: [test-and-validate, quality-gates]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Final coverage validation
      run: |
        npm run test:coverage-report
        
        # Check if all critical files meet 95% threshold
        node -e "
          const report = require('./coverage-reports/validation-report.json');
          if (!report.passed) {
            console.error('Coverage validation failed - not ready for deployment');
            process.exit(1);
          }
          console.log('âœ… All coverage thresholds met - ready for deployment');
        "
        
    - name: Generate deployment artifacts
      run: |
        npm run build
        
        # Create deployment package
        tar -czf deployment-package.tar.gz build/ package.json package-lock.json
        
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deployment-package.tar.gz
        retention-days: 30
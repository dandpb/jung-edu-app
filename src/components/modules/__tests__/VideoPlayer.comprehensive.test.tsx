/**
 * Comprehensive Unit Tests for VideoPlayer Component
 * Tests video playback, error handling, accessibility
 * Target: 80%+ coverage
 */

import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import VideoPlayer from '../VideoPlayer';
import { Video } from '../../../types';

// Mock react-youtube component
const mockYouTubeComponent = jest.fn();
const MockedYouTube = jest.fn().mockImplementation((props) => {
  mockYouTubeComponent(props);
  return (
    <div 
      data-testid="youtube-player"
      data-video-id={props.videoId}
      className={props.className}
    >
      YouTube Player Mock
    </div>
  );
});

jest.mock('react-youtube', () => MockedYouTube);

// Mock data factory
const createMockVideo = (overrides: Partial<Video> = {}): Video => ({
  id: 'test-video-1',
  title: 'Introduction to Jung Psychology',
  youtubeId: 'dQw4w9WgXcQ',
  description: 'A comprehensive introduction to Jungian psychology concepts.',
  duration: 1800, // 30 minutes
  transcript: 'Video transcript content...',
  keyMoments: [
    {
      timestamp: 120,
      title: 'Key Concept',
      description: 'Important concept explanation',
      type: 'concept',
      relatedConcepts: ['archetype']
    }
  ],
  captions: [
    {
      language: 'en',
      url: 'https://example.com/captions.vtt',
      autoGenerated: false
    }
  ],
  quality: [
    {
      resolution: '1080p',
      url: 'https://example.com/video.mp4',
      format: 'mp4'
    }
  ],
  thumbnails: [
    {
      url: 'https://example.com/thumb.jpg',
      width: 320,
      height: 180
    }
  ],
  chapters: [
    {
      id: 'chapter-1',
      title: 'Introduction',
      startTime: 0,
      endTime: 300,
      description: 'Introduction to the topic'
    }
  ],
  ...overrides
});

describe('VideoPlayer Component', () => {
  const mockVideo = createMockVideo();

  beforeEach(() => {
    jest.clearAllMocks();
    // Reset console.error mock
    jest.spyOn(console, 'error').mockImplementation(() => {});
  });

  afterEach(() => {
    jest.restoreAllMocks();
  });

  describe('Component Rendering', () => {
    it('should render video player with title and description', () => {
      render(<VideoPlayer video={mockVideo} />);

      expect(screen.getByText('Introduction to Jung Psychology')).toBeInTheDocument();
      expect(screen.getByText('A comprehensive introduction to Jungian psychology concepts.')).toBeInTheDocument();
    });

    it('should render YouTube player when video ID is provided', () => {
      render(<VideoPlayer video={mockVideo} />);

      expect(screen.getByTestId('youtube-player')).toBeInTheDocument();
      expect(mockYouTubeComponent).toHaveBeenCalledWith(
        expect.objectContaining({
          videoId: 'dQw4w9WgXcQ',
          opts: expect.objectContaining({
            height: '390',
            width: '100%',
            playerVars: expect.objectContaining({
              autoplay: 0,
              modestbranding: 1,
              rel: 0
            })
          }),
          className: 'w-full h-full'
        })
      );
    });

    it('should display video duration correctly', () => {
      render(<VideoPlayer video={mockVideo} />);

      expect(screen.getByText('Duration: 30:00')).toBeInTheDocument();
    });

    it('should format duration for videos less than an hour', () => {
      const shortVideo = createMockVideo({ duration: 125 }); // 2 minutes 5 seconds
      render(<VideoPlayer video={shortVideo} />);

      expect(screen.getByText('Duration: 2:05')).toBeInTheDocument();
    });
  });

  describe('Error Handling', () => {
    it('should show error message when video ID is missing', () => {
      const videoWithoutId = createMockVideo({ youtubeId: undefined });
      render(<VideoPlayer video={videoWithoutId} />);

      expect(screen.getByText('No video ID provided')).toBeInTheDocument();
      expect(screen.queryByTestId('youtube-player')).not.toBeInTheDocument();
    });

    it('should show error message when video is null', () => {
      render(<VideoPlayer video={null as any} />);

      expect(screen.getByText('No video ID provided')).toBeInTheDocument();
    });

    it('should show error message when video is undefined', () => {
      render(<VideoPlayer video={undefined as any} />);

      expect(screen.getByText('Video')).toBeInTheDocument();
      expect(screen.getByText('No video ID provided')).toBeInTheDocument();
    });

    it('should handle YouTube player errors', async () => {
      render(<VideoPlayer video={mockVideo} />);

      // Ensure the component was called and has onError callback
      expect(mockYouTubeComponent).toHaveBeenCalled();
      
      if (mockYouTubeComponent.mock.calls.length > 0) {
        const onErrorCallback = mockYouTubeComponent.mock.calls[0][0].onError;
        const mockErrorEvent = { data: 2, target: {} }; // YouTube error code 2

        // Trigger error
        onErrorCallback(mockErrorEvent);

        // The component should update state to show error
        await waitFor(() => {
          expect(screen.getByText('Unable to load video')).toBeInTheDocument();
          expect(screen.getByText('Watch on YouTube')).toBeInTheDocument();
        });

        expect(console.error).toHaveBeenCalledWith('YouTube Player Error:', mockErrorEvent);
      }
    });

    it('should provide YouTube fallback link when video fails to load', async () => {
      render(<VideoPlayer video={mockVideo} />);

      if (mockYouTubeComponent.mock.calls.length > 0) {
        // Trigger error
        const onErrorCallback = mockYouTubeComponent.mock.calls[0][0].onError;
        onErrorCallback({ data: 150 }); // Private video error

        await waitFor(() => {
          const youtubeLink = screen.getByText('Watch on YouTube').closest('a');
          expect(youtubeLink).toHaveAttribute('href', 'https://www.youtube.com/watch?v=dQw4w9WgXcQ');
          expect(youtubeLink).toHaveAttribute('target', '_blank');
          expect(youtubeLink).toHaveAttribute('rel', 'noopener noreferrer');
        });
      }
    });
  });

  describe('Video Player Configuration', () => {
    it('should configure YouTube player with correct options', () => {
      render(<VideoPlayer video={mockVideo} />);

      expect(mockYouTubeComponent).toHaveBeenCalledWith(
        expect.objectContaining({
          opts: {
            height: '390',
            width: '100%',
            playerVars: {
              autoplay: 0,
              modestbranding: 1,
              rel: 0
            }
          }
        })
      );
    });

    it('should have onReady callback', () => {
      render(<VideoPlayer video={mockVideo} />);

      const onReadyCallback = mockYouTubeComponent.mock.calls[0][0].onReady;
      expect(typeof onReadyCallback).toBe('function');

      // Should not throw when called
      expect(() => onReadyCallback()).not.toThrow();
    });

    it('should have onError callback', () => {
      render(<VideoPlayer video={mockVideo} />);

      const onErrorCallback = mockYouTubeComponent.mock.calls[0][0].onError;
      expect(typeof onErrorCallback).toBe('function');
    });
  });

  describe('Duration Formatting', () => {
    it('should format seconds-only duration', () => {
      const shortVideo = createMockVideo({ duration: 45 });
      render(<VideoPlayer video={shortVideo} />);

      expect(screen.getByText('Duration: 0:45')).toBeInTheDocument();
    });

    it('should format minutes and seconds', () => {
      const mediumVideo = createMockVideo({ duration: 150 }); // 2:30
      render(<VideoPlayer video={mediumVideo} />);

      expect(screen.getByText('Duration: 2:30')).toBeInTheDocument();
    });

    it('should pad single digit seconds with zero', () => {
      const video = createMockVideo({ duration: 65 }); // 1:05
      render(<VideoPlayer video={video} />);

      expect(screen.getByText('Duration: 1:05')).toBeInTheDocument();
    });

    it('should handle zero duration', () => {
      const video = createMockVideo({ duration: 0 });
      render(<VideoPlayer video={video} />);

      expect(screen.getByText('Duration: 0:00')).toBeInTheDocument();
    });

    it('should handle duration as object format', () => {
      const video = createMockVideo({ 
        duration: { hours: 1, minutes: 30, seconds: 45 } as any
      });
      render(<VideoPlayer video={video} />);

      // Should default to 0 when duration is not a number
      expect(screen.getByText('Duration: 0:00')).toBeInTheDocument();
    });

    it('should handle undefined duration', () => {
      const video = createMockVideo({ duration: undefined as any });
      render(<VideoPlayer video={video} />);

      expect(screen.getByText('Duration: 0:00')).toBeInTheDocument();
    });
  });

  describe('Component Structure and Styling', () => {
    it('should have proper card wrapper', () => {
      render(<VideoPlayer video={mockVideo} />);

      const cardElement = screen.getByText('Introduction to Jung Psychology').closest('.card');
      expect(cardElement).toBeInTheDocument();
    });

    it('should have responsive video container', () => {
      render(<VideoPlayer video={mockVideo} />);

      const videoContainer = screen.getByTestId('youtube-player').closest('.aspect-w-16');
      expect(videoContainer).toHaveClass('aspect-w-16', 'aspect-h-9', 'rounded-lg', 'overflow-hidden');
    });

    it('should apply correct styling classes', () => {
      render(<VideoPlayer video={mockVideo} />);

      const title = screen.getByText('Introduction to Jung Psychology');
      expect(title).toHaveClass('text-xl', 'font-semibold', 'text-gray-900', 'mb-2');

      const description = screen.getByText('A comprehensive introduction to Jungian psychology concepts.');
      expect(description).toHaveClass('text-gray-600', 'mb-4');
    });
  });

  describe('Accessibility', () => {
    it('should have semantic HTML structure', () => {
      render(<VideoPlayer video={mockVideo} />);

      const title = screen.getByRole('heading', { level: 3 });
      expect(title).toHaveTextContent('Introduction to Jung Psychology');
    });

    it('should have accessible duration information', () => {
      render(<VideoPlayer video={mockVideo} />);

      const durationText = screen.getByText('Duration: 30:00');
      expect(durationText).toBeInTheDocument();
      
      // Should be in a container with Clock icon
      const durationContainer = durationText.closest('div');
      expect(durationContainer).toHaveClass('flex', 'items-center');
    });

    it('should provide accessible fallback for failed videos', async () => {
      const { rerender } = render(<VideoPlayer video={mockVideo} />);

      // Trigger error
      const onErrorCallback = mockYouTubeComponent.mock.calls[0][0].onError;
      onErrorCallback({ data: 150 });

      rerender(<VideoPlayer video={mockVideo} />);

      await waitFor(() => {
        const fallbackLink = screen.getByText('Watch on YouTube');
        expect(fallbackLink).toBeInTheDocument();
        expect(fallbackLink.closest('a')).toHaveAttribute('rel', 'noopener noreferrer');
      });
    });
  });

  describe('Edge Cases', () => {
    it('should handle very long video titles', () => {
      const longTitleVideo = createMockVideo({ 
        title: 'A Very Long Video Title That Might Overflow The Container And Cause Layout Issues In The User Interface'
      });
      
      render(<VideoPlayer video={longTitleVideo} />);

      expect(screen.getByText('A Very Long Video Title That Might Overflow The Container And Cause Layout Issues In The User Interface')).toBeInTheDocument();
    });

    it('should handle empty description', () => {
      const noDescVideo = createMockVideo({ description: '' });
      render(<VideoPlayer video={noDescVideo} />);

      // Should still render but with empty description
      expect(screen.getByText('Introduction to Jung Psychology')).toBeInTheDocument();
    });

    it('should handle special characters in video ID', () => {
      const specialIdVideo = createMockVideo({ youtubeId: 'abc-123_XYZ' });
      render(<VideoPlayer video={specialIdVideo} />);

      expect(screen.getByTestId('youtube-player')).toHaveAttribute('data-video-id', 'abc-123_XYZ');
    });

    it('should handle very short duration', () => {
      const veryShortVideo = createMockVideo({ duration: 5 });
      render(<VideoPlayer video={veryShortVideo} />);

      expect(screen.getByText('Duration: 0:05')).toBeInTheDocument();
    });

    it('should handle very long duration', () => {
      const veryLongVideo = createMockVideo({ duration: 7200 }); // 2 hours
      render(<VideoPlayer video={veryLongVideo} />);

      expect(screen.getByText('Duration: 120:00')).toBeInTheDocument();
    });
  });

  describe('State Management', () => {
    it('should initialize with no error state', () => {
      render(<VideoPlayer video={mockVideo} />);

      expect(screen.queryByText('Unable to load video')).not.toBeInTheDocument();
      expect(screen.getByTestId('youtube-player')).toBeInTheDocument();
    });

    it('should persist error state after error occurs', async () => {
      const { rerender } = render(<VideoPlayer video={mockVideo} />);

      // Trigger error
      const onErrorCallback = mockYouTubeComponent.mock.calls[0][0].onError;
      onErrorCallback({ data: 150 });

      rerender(<VideoPlayer video={mockVideo} />);

      await waitFor(() => {
        expect(screen.getByText('Unable to load video')).toBeInTheDocument();
        expect(screen.queryByTestId('youtube-player')).not.toBeInTheDocument();
      });

      // Re-render again to ensure error state persists
      rerender(<VideoPlayer video={mockVideo} />);

      expect(screen.getByText('Unable to load video')).toBeInTheDocument();
    });

    it('should reset error state when video changes', async () => {
      const { rerender } = render(<VideoPlayer video={mockVideo} />);

      // Trigger error
      const onErrorCallback = mockYouTubeComponent.mock.calls[0][0].onError;
      onErrorCallback({ data: 150 });

      rerender(<VideoPlayer video={mockVideo} />);

      await waitFor(() => {
        expect(screen.getByText('Unable to load video')).toBeInTheDocument();
      });

      // Change video
      const newVideo = createMockVideo({ id: 'new-video', youtubeId: 'newVideoId' });
      rerender(<VideoPlayer video={newVideo} />);

      // Should show player again (error state reset)
      expect(screen.getByTestId('youtube-player')).toBeInTheDocument();
      expect(screen.queryByText('Unable to load video')).not.toBeInTheDocument();
    });
  });
});
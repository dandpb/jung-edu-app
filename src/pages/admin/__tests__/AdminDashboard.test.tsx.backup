import React from 'react';
import { render, screen, userEvent } from '../../../utils/test-utils';
import AdminDashboard from '../AdminDashboard';
import { Module, AdminUser } from '../../../types';

// Mock lucide-react icons
jest.mock('lucide-react', () => {
  const React = require('react');
  return {
    BookOpen: ({ className }: any) => React.createElement('div', { 'data-testid': 'book-icon', className }, 'BookOpen'),
    HelpCircle: ({ className }: any) => React.createElement('div', { 'data-testid': 'help-icon', className }, 'HelpCircle'),
    Video: ({ className }: any) => React.createElement('div', { 'data-testid': 'video-icon', className }, 'Video'),
    Users: ({ className }: any) => React.createElement('div', { 'data-testid': 'users-icon', className }, 'Users'),
    Settings: ({ className }: any) => React.createElement('div', { 'data-testid': 'settings-icon', className }, 'Settings'),
    FileText: ({ className }: any) => React.createElement('div', { 'data-testid': 'file-icon', className }, 'FileText'),
    ArrowRight: ({ className }: any) => React.createElement('div', { 'data-testid': 'arrow-icon', className }, 'ArrowRight'),
    Plus: ({ className }: any) => React.createElement('div', { 'data-testid': 'plus-icon', className }, 'Plus'),
  };
});

// Mock the useAdmin hook
jest.mock('../../../contexts/AdminContext', () => ({
  ...jest.requireActual('../../../contexts/AdminContext'),
  useAdmin: jest.fn()
}));

const mockModules: Module[] = [
  {
    id: 'module-1',
    title: 'Test Module 1',
    description: 'Test description 1',
    category: 'Fundamental Concepts',
    difficulty: 'beginner',
    estimatedTime: 30,
    prerequisites: [],
    content: {
      sections: [],
      quiz: {
        questions: []
      },
      videos: ['video1', 'video2']
    },
    order: 1
  },
  {
    id: 'module-2',
    title: 'Test Module 2',
    description: 'Test description 2',
    category: 'Clinical Applications',
    difficulty: 'intermediate',
    estimatedTime: 45,
    prerequisites: ['module-1'],
    content: {
      sections: [],
      quiz: {
        questions: []
      },
      videos: ['video3']
    },
    order: 2
  },
  {
    id: 'module-3',
    title: 'Test Module 3',
    description: 'Test description 3',
    category: 'Advanced Topics',
    difficulty: 'advanced',
    estimatedTime: 60,
    prerequisites: ['module-2'],
    content: {
      sections: [],
      quiz: undefined,
      videos: []
    },
    order: 3
  }
];

const mockAdmin: AdminUser = {
  id: 'admin-1',
  username: 'testadmin',
  password: 'hashed-password',
  role: 'admin',
  lastLogin: new Date('2024-01-15T10:00:00').getTime()
};

const mockUseAdmin = () => ({
  isAdmin: true,
  currentAdmin: mockAdmin,
  login: jest.fn(),
  logout: jest.fn(),
  modules: mockModules,
  updateModules: jest.fn()
});


describe('AdminDashboard Component', () => {
  beforeEach(() => {
    const { useAdmin } = require('../../../contexts/AdminContext');
    (useAdmin as jest.Mock).mockReturnValue(mockUseAdmin());
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('renders admin dashboard with correct title and welcome message', () => {
    render(<AdminDashboard />);
    
    expect(screen.getByText('Painel Administrativo')).toBeInTheDocument();
    expect(screen.getByText(/Bem-vindo de volta, testadmin!/)).toBeInTheDocument();
  });

  test('displays correct statistics', () => {
    render(<AdminDashboard />);
    
    // Total Modules
    expect(screen.getByText('Total de Módulos')).toBeInTheDocument();
    const moduleStats = screen.getByText('Total de Módulos').closest('div')?.parentElement;
    expect(moduleStats?.textContent).toContain('3');
    
    // Total Quizzes (2 modules have quizzes)
    expect(screen.getByText('Total de Questionários')).toBeInTheDocument();
    const quizStats = screen.getByText('Total de Questionários').closest('div')?.parentElement;
    expect(quizStats?.textContent).toContain('2');
    
    // Video Content (3 videos total)
    expect(screen.getByText('Conteúdo de Vídeo')).toBeInTheDocument();
    const videoStats = screen.getByText('Conteúdo de Vídeo').closest('div')?.parentElement;
    expect(videoStats?.textContent).toContain('3');
    
    // Active Users
    expect(screen.getByText('Usuários Ativos')).toBeInTheDocument();
    const userStats = screen.getByText('Usuários Ativos').closest('div')?.parentElement;
    expect(userStats?.textContent).toContain('1');
  });

  test('renders all admin cards with correct information', () => {
    render(<AdminDashboard />);
    
    // Manage Modules card
    expect(screen.getByText('Gerenciar Módulos')).toBeInTheDocument();
    expect(screen.getByText('Criar, editar e organizar módulos de aprendizagem')).toBeInTheDocument();
    expect(screen.getByText('3 módulos')).toBeInTheDocument();
    
    // Resources & Media card
    expect(screen.getByText('Recursos e Mídia')).toBeInTheDocument();
    expect(screen.getByText('Gerenciar bibliografia, filmes e vídeos')).toBeInTheDocument();
    expect(screen.getByText('Livros, Filmes, Vídeos')).toBeInTheDocument();
  });

  test('admin cards are clickable links with correct paths', () => {
    render(<AdminDashboard />);
    
    const manageModulesLink = screen.getByRole('link', { name: /Gerenciar Módulos/i });
    expect(manageModulesLink).toHaveAttribute('href', '/admin/modules');
    
    const resourcesLink = screen.getByRole('link', { name: /Recursos e Mídia/i });
    expect(resourcesLink).toHaveAttribute('href', '/admin/resources');
  });

  test('renders quick action buttons', () => {
    render(<AdminDashboard />);
    
    expect(screen.getByText('Ações Rápidas')).toBeInTheDocument();
    
    const addModuleBtn = screen.getByRole('link', { name: 'Adicionar Novo Módulo' });
    expect(addModuleBtn).toHaveAttribute('href', '/admin/modules');
    
    const addResourcesBtn = screen.getByRole('link', { name: 'Adicionar Recursos' });
    expect(addResourcesBtn).toHaveAttribute('href', '/admin/resources');
  });

  test('displays system status with last login information', () => {
    render(<AdminDashboard />);
    
    expect(screen.getByText(/Status do Sistema:/)).toBeInTheDocument();
    expect(screen.getByText(/Todos os sistemas operacionais/)).toBeInTheDocument();
    expect(screen.getByText(/Último login:/)).toBeInTheDocument();
    // The component uses toLocaleString() which formats dates differently across environments
    // Just check that some date/time is shown
    const lastLoginElement = screen.getByText(/Último login:/);
    expect(lastLoginElement.parentElement?.textContent).toMatch(/Último login: .+/);
  });

  test('handles null currentAdmin gracefully', () => {
    const { useAdmin } = require('../../../contexts/AdminContext');
    (useAdmin as jest.Mock).mockReturnValue({
      ...mockUseAdmin(),
      currentAdmin: null
    });
    
    render(<AdminDashboard />);
    
    expect(screen.getByText(/Bem-vindo de volta, !/)).toBeInTheDocument();
    expect(screen.getByText(/Último login: Nunca/)).toBeInTheDocument();
  });

  test('calculates statistics correctly with empty modules', () => {
    const { useAdmin } = require('../../../contexts/AdminContext');
    (useAdmin as jest.Mock).mockReturnValue({
      ...mockUseAdmin(),
      modules: []
    });
    
    render(<AdminDashboard />);
    
    // Check all stats show 0
    const zeroStats = screen.getAllByText('0');
    expect(zeroStats.length).toBeGreaterThanOrEqual(3); // At least 3 stats should be 0
  });

  test('handles modules without videos correctly', () => {
    const modulesWithoutVideos = mockModules.map(m => ({
      ...m,
      content: { ...m.content, videos: undefined }
    }));
    
    const { useAdmin } = require('../../../contexts/AdminContext');
    (useAdmin as jest.Mock).mockReturnValue({
      ...mockUseAdmin(),
      modules: modulesWithoutVideos
    });
    
    render(<AdminDashboard />);
    
    // Video count should be 0
    expect(screen.getByText('Conteúdo de Vídeo')).toBeInTheDocument();
    const videoCount = screen.getAllByText('0').find(el => 
      el.closest('div')?.textContent?.includes('Conteúdo de Vídeo')
    );
    expect(videoCount).toBeInTheDocument();
  });

  test('hover effects on cards work correctly', async () => {
    const user = userEvent.setup();
    render(<AdminDashboard />);
    
    const manageModulesCard = screen.getByRole('link', { name: /Gerenciar Módulos/i });
    
    // Check initial state
    expect(manageModulesCard).toHaveClass('card');
    
    // Hover over card
    await user.hover(manageModulesCard);
    
    // Check hover classes are applied
    expect(manageModulesCard).toHaveClass('hover:shadow-lg');
    expect(manageModulesCard).toHaveClass('hover:scale-[1.02]');
  });

  test('renders all icon components correctly', () => {
    render(<AdminDashboard />);
    
    // Check for presence of lucide icons by their SVG elements
    const container = screen.getByText('Painel Administrativo').closest('div')?.parentElement;
    const svgIcons = container?.querySelectorAll('svg.lucide');
    
    // We expect multiple icons: stat icons (4), card icons (2), arrow icons (2), settings icon (1)
    expect(svgIcons?.length).toBeGreaterThanOrEqual(9);
  });
});